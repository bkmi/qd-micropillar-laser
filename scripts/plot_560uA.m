%% Plot @ 560 microamps, branches

% plot settings
tdeco={'fontsize',13.2,'fontweight','bold'};

% colors
colorNum = 9;
bluecol = brewermap(colorNum,'Blues');
redcol = brewermap(colorNum,'Reds');
greycol = brewermap(colorNum,'Greys');
greencol = brewermap(colorNum,'Greens');

% linewidth
linewidth = 2;

%% plot

branchplot = figure;

% % Plot each hopf_branch
namesHopfBranches = fieldnames(hopf_branches);
% for i = [12,13,15,16,17] % 1:numel(namesHopfBranches)
%     % Add each hopf_branch
%     if ~any(strcmp('error', ... 
%             fieldnames(hopf_branches.(namesHopfBranches{i}))))
%         % Only plot hopf_branches that DO NOT have errors
%         plot_branch(hopf_branches.(namesHopfBranches{i}), param, ...
%             'add_2_gcf', 1, 'color','c');
%     end
% end


% prune hopfs
oneHopf = hopf_branches.(namesHopfBranches{12});
oneHopf.point(300:end) = [];
oneHopf.point(1:85) = [];

twoHopf = hopf_branches.(namesHopfBranches{13});
twoHopf.point(217:end) = [];
twoHopf.point(1:158) = [];

threeHopf = hopf_branches.(namesHopfBranches{15});
threeHopf.point(206:end) = [];
threeHopf.point(1:140) = [];

fourHopf = hopf_branches.(namesHopfBranches{16});
fourHopf.point(end-1:end) = [];
fourHopf.point(1:90) = [];

fiveHopf = hopf_branches.(namesHopfBranches{17});
fiveHopf.point(235:end) = [];
fiveHopf.point(1:165) = [];

hopfs(1) = oneHopf;
hopfs(2) = twoHopf;
hopfs(3) = threeHopf;
hopfs(4) = fourHopf;
hopfs(5) = fiveHopf;

for i = 1:numel(hopfs)
    [~,~,lineHandHopf] = plot_branch(hopfs(i), param, ...
        'add_2_gcf', 1, 'color','b', ...
        'PlotStyle', { 'LineStyle', '-', 'Marker', '.' }); % ,tdeco{:}
end

%% Plot each fold_branch

namesFoldBranches = fieldnames(fold_branches);
% 
% for i = [7,8] % 1:numel(namesFoldBranches)
%     % Add each hopf_branch
%     if ~any(strcmp('error',...
%             fieldnames(fold_branches.(namesFoldBranches{i}))))
%         % Only plot fold_branches that DO NOT have errors
%         plot_branch(fold_branches.(namesFoldBranches{i}), param, ...
%             'add_2_gcf', 1, 'color','r');
%     end
%     
% end

% prune folds
oneFold = fold_branches.(namesFoldBranches{7});
oneFold.point(310:end) = [];
oneFold.point(1:143) = [];

twoFold = fold_branches.(namesFoldBranches{8});
twoFold.point(234:end) = [];
twoFold.point(1:66) = [];

[~,~,lineHandFold1] = plot_branch(oneFold, param, ...
        'add_2_gcf', 1, 'color','r', ...
        'PlotStyle', { 'LineStyle', '-', 'Marker', '.' }); % ,tdeco{:}
[~,~,lineHandFold2] = plot_branch(twoFold, param, ...
        'add_2_gcf', 1, 'color','r', ...
        'PlotStyle', { 'LineStyle', '-', 'Marker', '.' }); % ,tdeco{:}

lgnd = legend([lineHandHopf{1}, lineHandFold1{1}], ...
    'Hopf Bifurcation', ...
    'Fold Bifurcation', ...
    'Location', 'SouthEast');
set(gca,'YLim',[0 0.5])
title('Feedback Amp vs Feedback Phase');


%% Omega plot

numel(branch_stst.point)
saveThesePts = 500;
plot_param = param;
plot_param.units{param.omega.index} = 'GHz';

prunedBranch_stst = branch_stst;
prunedBranch_stst.point(saveThesePts+1677:end) = [];
prunedBranch_stst.point(1:1677-saveThesePts) = [];

[prunedNunst,~,~,~] = GetRotStability(prunedBranch_stst,funcs);

[~, omegaplot] = plot_branch(prunedBranch_stst,plot_param, ...
    'nunst_color',prunedNunst); % ,tdeco{:}


colorbar('off')
lgnd = legend('Zero', 'One', 'Two', 'Three');
lgndTitle = get(legend,'title');
set(lgndTitle,'string','Unstable Eigenvalues');
title('\omega vs Feedback Phase, Feedback Amp = 0.373');


%% Save things

% Set + Print to pdf
set(branchplot,'PaperType','a4')
set(branchplot,'PaperOrientation','landscape');
set(branchplot,'PaperUnits','normalized');
set(branchplot,'PaperPosition', [0 0 1 1]);
branchPlotFileName = [master_options.datadir_specific,'BranchPlot.pdf'];
print(branchplot,branchPlotFileName,'-dpdf')

% Set + Print to pdf
set(omegaplot,'PaperType','a4')
set(omegaplot,'PaperOrientation','landscape');
set(omegaplot,'PaperUnits','normalized');
set(omegaplot,'PaperPosition', [0 0 1 1]);
omegaPlotFileName = [master_options.datadir_specific,'OmegaPlot.pdf'];
print(omegaplot,omegaPlotFileName,'-dpdf')

%% Print to combined PDF

unix(['pdftk ', branchPlotFileName,' ', omegaPlotFileName, ' ', ...
'cat output ', ... 
master_options.datadir_specific, 'BranchOmegaPlotCombi.pdf']);



%% Just a little calc...
% 
% % vert at pi phase
% vertBranch3Stab = pickAndSwitch(funcs, ...
%     branch_stst, ...
%     param.feed_ampli.index, ...
%     300, ...
%     param, ...
%     'reverse',1, ...
%     'nunst_color', nunst_branch_stst, ...
%     'point', 2076);
% 
% plot_branch(vertBranch3Stab, param, ...
%     'nunst_color', vertBranch3Stab.nunst)
% 
% save([master_options.datadir_specific,'vertBranch3Stab.mat'], ...
%     'vertBranch3Stab');
% 
% 
% %% Hopf conts from top of vert
% 
% step_bound_forHOPF = { ...
%     'step',pi/64, ...
%     'max_step', ...
%     [param.feed_phase.index,(1) * pi/64, ...
%     param.feed_ampli.index, (1) * 0.01], ...
%     'newton_max_iterations',20, ...
%     'max_bound',[param.feed_phase.index,15*pi, param.feed_ampli.index,2], ...
%     'min_bound',[param.feed_phase.index,-15*pi, param.feed_ampli.index,-1], ...
%     'halting_accuracy',1e-10, ...
%     'minimal_accuracy',1e-6 };
% 
% step_bound_forFOLD = { ...
%     'step',pi/64, ...
%     'max_step', ...
%     [param.feed_phase.index,(1) * pi/32, ...
%     param.feed_ampli.index, (1) * 0.05], ...
%     'newton_max_iterations',20, ...
%     'max_bound',[param.feed_phase.index,15*pi, param.feed_ampli.index,2], ...
%     'min_bound',[param.feed_phase.index,-15*pi, param.feed_ampli.index,-1], ...
%     'halting_accuracy',1e-10, ...
%     'minimal_accuracy',1e-6 };
% Nothing here.. sadly

% hopfs_vrtBrn3 = bifurContin_FoldHopf( ...
%             funcs, ... 
%             vertBranch3Stab, ...
%             vertBranch3Stab.indHopf(2), ...
%             [ind_feed_phase, ind_feed_ampli], ...
%             500, ...
%             param,...
%             'plot_prog', 1, ...
%             master_options,...
%             'save',0, ...
%             'step_bound_opt', step_bound_forHOPF);
% 
% hopfs_vrtBrn3 = bifurFoldHopfMultiCreator( ...
%     funcs, ...
%     vertBranch3Stab, ...
%     param, ...
%     vertBranch3Stab.indHopf, ...
%     250);
% 
% branchplot = figure;
% 
% for i = 1:numel(hopfs_vrtBrn3)
%     % Add each hopf
%     if isa(hopfs_vrtBrn3(i).error,'double') && hopfs_vrtBrn3(i).error == 0
%         plot_branch(hopfs_vrtBrn3(i), param, ...
%             'add_2_gcf', 1, 'color','c');
%     end
% end
% 
% save([master_options.datadir_specific,'hopfs_vrtBrn3.mat'], ...
%     'hopfs_vrtBrn3');
% 
% %% horiz at 0.5, stable
% horizBranch05Stab = pickAndSwitch(funcs, ...
%     vertBranch3Stab, ...
%     param.feed_phase.index, ...
%     350, ...
%     param, ...
%     'axes_indParam', [param.feed_phase.index, param.feed_ampli.index], ...
%     'reverse',1, ...
%     'nunst_color', vertBranch3Stab.nunst, ...
%     'point', 172);
% 
% plot_branch(horizBranch05Stab, param, ...
%     'nunst_color', horizBranch05Stab.nunst)
% 
% save([master_options.datadir_specific,'horizBranch05Stab.mat'], ...
%     'horizBranch05Stab');
% 
% %% hopfs from
% 
% hopfs_horBrn05 = bifurContin_FoldHopf( ...
%             funcs, ... 
%             horizBranch05Stab, ...
%             horizBranch05Stab.indHopf(2), ...
%             [ind_feed_phase, ind_feed_ampli], ...
%             500, ...
%             param,...
%             'plot_prog', 1, ...
%             master_options,...
%             'save',0, ...
%             'step_bound_opt', step_bound_forHOPF);
% 
% 
% %% unstab
% horizBranch05unstab = pickAndSwitch(funcs, ...
%     vertBranch3Stab, ...
%     param.feed_phase.index, ...
%     350, ...
%     param, ...
%     'axes_indParam', [param.feed_phase.index, param.feed_ampli.index], ...
%     'reverse',1, ...
%     'nunst_color', vertBranch3Stab.nunst, ...
%     'point', 338);
% 
% plot_branch(horizBranch05unstab, param, ...
%     'nunst_color', horizBranch05unstab.nunst)
% 
% save([master_options.datadir_specific,'horizBranch05unstab.mat'], ...
%     'horizBranch05unstab');